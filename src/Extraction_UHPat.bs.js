// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Extraction_declear$Extraction = require("./Extraction_declear.bs.js");

function uhpat_translater(_t) {
  while(true) {
    var t = _t;
    switch (t.tag | 0) {
      case /* EmptyHole */0 :
          return ;
      case /* Wild */1 :
          if (t[0]) {
            return ;
          } else {
            return "_";
          }
      case /* Var */2 :
          if (t[0] || t[1]) {
            return ;
          } else {
            return t[2];
          }
      case /* NumLit */3 :
          if (t[0]) {
            return ;
          } else {
            return String(t[1]);
          }
      case /* BoolLit */4 :
          if (t[0]) {
            return ;
          } else {
            return Pervasives.string_of_bool(t[1]);
          }
      case /* ListNil */5 :
          if (t[0]) {
            return ;
          } else {
            return "[]";
          }
      case /* Parenthesized */6 :
          var match = uhpat_translater(t[0]);
          if (match !== undefined) {
            return "(" + (match + ")");
          } else {
            return ;
          }
      case /* OpSeq */7 :
          var skel_t = t[0];
          if (skel_t.tag && !skel_t[0]) {
            return uhpat_opseq_translater(t[1]);
          } else {
            return ;
          }
      case /* Inj */8 :
          if (t[0]) {
            return ;
          } else {
            _t = t[2];
            continue ;
          }
      
    }
  };
}

function uhpat_opseq_translater(opseq) {
  if (opseq.tag) {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                uhpat_opseq_translater(opseq[0]),
                /* :: */[
                  uhpat_op_translater(opseq[1]),
                  /* :: */[
                    uhpat_translater(opseq[2]),
                    /* [] */0
                  ]
                ]
              ]);
  } else {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                uhpat_translater(opseq[0]),
                /* :: */[
                  uhpat_op_translater(opseq[1]),
                  /* :: */[
                    uhpat_translater(opseq[2]),
                    /* [] */0
                  ]
                ]
              ]);
  }
}

function uhpat_op_translater(op) {
  switch (op) {
    case /* Comma */0 :
        return ", ";
    case /* Space */1 :
        return " ";
    case /* Cons */2 :
        return " :: ";
    
  }
}

exports.uhpat_translater = uhpat_translater;
exports.uhpat_opseq_translater = uhpat_opseq_translater;
exports.uhpat_op_translater = uhpat_op_translater;
/* No side effect */

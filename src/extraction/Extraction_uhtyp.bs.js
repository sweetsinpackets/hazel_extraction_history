// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Extraction_tool$Extraction = require("./Extraction_tool.bs.js");

function uhtyp_trans(t) {
  return uhtyp_seq_trans(t[1]);
}

function uhtyp_seq_trans(t) {
  var affix_e = t[1];
  var operand = t[0];
  if (affix_e) {
    return uhtyp_const(operand, affix_e[0], uhtyp_seq_trans(affix_e[1]));
  } else {
    return uhtyp_operand_trans(operand);
  }
}

function uhtyp_operand_trans(ope) {
  if (typeof ope === "number") {
    switch (ope) {
      case /* Hole */0 :
          return /* tuple */[
                  undefined,
                  /* HOLE */0
                ];
      case /* Unit */1 :
          return /* tuple */[
                  "()",
                  /* Unit */3
                ];
      case /* Num */2 :
          return /* tuple */[
                  "int",
                  /* Number */2
                ];
      case /* Bool */3 :
          return /* tuple */[
                  "bool",
                  /* Bool */1
                ];
      
    }
  } else if (ope.tag) {
    return Extraction_tool$Extraction.extract_t_concat(/* :: */[
                uhtyp_trans(ope[0]),
                /* :: */[
                  /* tuple */[
                    " list",
                    /* UNK */5
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return Extraction_tool$Extraction.extract_t_concat(/* :: */[
                /* tuple */[
                  "(",
                  /* UNK */5
                ],
                /* :: */[
                  uhtyp_trans(ope[0]),
                  /* :: */[
                    /* tuple */[
                      ")",
                      /* UNK */5
                    ],
                    /* [] */0
                  ]
                ]
              ]);
  }
}

function uhtyp_const(ope1, op, ope2) {
  var match = uhtyp_operand_trans(ope1);
  var p2 = ope2[1];
  var s2 = ope2[0];
  var p1 = match[1];
  var s1 = match[0];
  switch (op) {
    case /* Arrow */0 :
        return /* tuple */[
                Extraction_tool$Extraction.option_string_concat(/* :: */[
                      s1,
                      /* :: */[
                        "->",
                        /* :: */[
                          s2,
                          /* [] */0
                        ]
                      ]
                    ]),
                /* ARROW */Block.__(1, [
                    p1,
                    p2
                  ])
              ];
    case /* Prod */1 :
        return /* tuple */[
                Extraction_tool$Extraction.option_string_concat(/* :: */[
                      s1,
                      /* :: */[
                        "*",
                        /* :: */[
                          s2,
                          /* [] */0
                        ]
                      ]
                    ]),
                /* PROD */Block.__(3, [
                    p1,
                    p2
                  ])
              ];
    case /* Sum */2 :
        return /* tuple */[
                Extraction_tool$Extraction.option_string_concat(/* :: */[
                      s1,
                      /* :: */[
                        "|",
                        /* :: */[
                          s2,
                          /* [] */0
                        ]
                      ]
                    ]),
                /* SUM */Block.__(2, [
                    p1,
                    p2
                  ])
              ];
    
  }
}

exports.uhtyp_trans = uhtyp_trans;
exports.uhtyp_seq_trans = uhtyp_seq_trans;
exports.uhtyp_operand_trans = uhtyp_operand_trans;
exports.uhtyp_const = uhtyp_const;
/* No side effect */

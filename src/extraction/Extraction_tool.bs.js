// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");

function option_string_concat(strs) {
  if (strs) {
    var a = strs[0];
    var match = option_string_concat(strs[1]);
    if (a !== undefined && match !== undefined) {
      return a + match;
    } else {
      return ;
    }
  } else {
    return "";
  }
}

function option_string_concat_ignoreNone(strs) {
  if (strs) {
    var a = strs[0];
    var match = option_string_concat_ignoreNone(strs[1]);
    if (a !== undefined) {
      var s1 = a;
      if (match !== undefined) {
        return s1 + match;
      } else {
        return s1;
      }
    } else if (match !== undefined) {
      return match;
    } else {
      return ;
    }
  } else {
    return "";
  }
}

function indent_space(level) {
  if (level > 0) {
    return "  " + indent_space(level - 1 | 0);
  } else {
    return "";
  }
}

function pass_eq(_type1, _type2) {
  while(true) {
    var type2 = _type2;
    var type1 = _type1;
    if (typeof type1 === "number") {
      switch (type1) {
        case /* HOLE */0 :
            if (typeof type2 === "number") {
              if (type2 !== 0) {
                if (type2 < 4) {
                  return false;
                }
                
              } else {
                return true;
              }
            } else {
              return false;
            }
            break;
        case /* Bool */1 :
            if (typeof type2 === "number") {
              if (type2 !== 1) {
                if (type2 < 4) {
                  return false;
                }
                
              } else {
                return true;
              }
            } else {
              return false;
            }
            break;
        case /* Number */2 :
            if (typeof type2 === "number") {
              if (type2 !== 2) {
                if (type2 < 4) {
                  return false;
                }
                
              } else {
                return true;
              }
            } else {
              return false;
            }
            break;
        case /* Unit */3 :
            if (typeof type2 === "number") {
              if (type2 !== 3) {
                if (type2 < 4) {
                  return false;
                }
                
              } else {
                return true;
              }
            } else {
              return false;
            }
            break;
        case /* EMPTY */4 :
        case /* CANNOT_INFER */5 :
            break;
        case /* CONFLICT */6 :
            return false;
        
      }
    } else if (type1.tag) {
      if (typeof type2 === "number") {
        switch (type2) {
          case /* EMPTY */4 :
          case /* CANNOT_INFER */5 :
          case /* CONFLICT */6 :
              break;
          default:
            return false;
        }
      } else if (type2.tag === /* APP */1 && pass_eq(type1[0], type2[0])) {
        _type2 = type2[1];
        _type1 = type1[1];
        continue ;
      } else {
        return false;
      }
    } else if (typeof type2 === "number") {
      switch (type2) {
        case /* EMPTY */4 :
        case /* CANNOT_INFER */5 :
        case /* CONFLICT */6 :
            break;
        default:
          return false;
      }
    } else if (type2.tag) {
      return false;
    } else {
      _type2 = type2[0];
      _type1 = type1[0];
      continue ;
    }
    if (typeof type2 === "number" && type2 >= 4) {
      return type2 < 6;
    } else {
      return true;
    }
  };
}

function pass_check(type1, type2) {
  var exit = 0;
  var exit$1 = 0;
  if (typeof type1 === "number") {
    switch (type1) {
      case /* Bool */1 :
          if (typeof type2 === "number") {
            switch (type2) {
              case /* Bool */1 :
                  return /* Bool */1;
              case /* HOLE */0 :
              case /* Number */2 :
              case /* Unit */3 :
                  return /* CONFLICT */6;
              case /* EMPTY */4 :
              case /* CANNOT_INFER */5 :
                  exit$1 = 3;
                  break;
              case /* CONFLICT */6 :
                  break;
              
            }
          } else {
            return /* CONFLICT */6;
          }
          break;
      case /* Number */2 :
          if (typeof type2 === "number") {
            switch (type2) {
              case /* Number */2 :
                  return /* Number */2;
              case /* HOLE */0 :
              case /* Bool */1 :
              case /* Unit */3 :
                  return /* CONFLICT */6;
              case /* EMPTY */4 :
              case /* CANNOT_INFER */5 :
                  exit$1 = 3;
                  break;
              case /* CONFLICT */6 :
                  break;
              
            }
          } else {
            return /* CONFLICT */6;
          }
          break;
      case /* Unit */3 :
          if (typeof type2 === "number") {
            switch (type2) {
              case /* HOLE */0 :
              case /* Bool */1 :
              case /* Number */2 :
                  return /* CONFLICT */6;
              case /* Unit */3 :
                  return /* Unit */3;
              case /* EMPTY */4 :
              case /* CANNOT_INFER */5 :
                  exit$1 = 3;
                  break;
              case /* CONFLICT */6 :
                  break;
              
            }
          } else {
            return /* CONFLICT */6;
          }
          break;
      case /* EMPTY */4 :
          return type2;
      default:
        exit$1 = 3;
    }
  } else if (type1.tag) {
    var b1 = type1[1];
    var a1 = type1[0];
    if (typeof type2 === "number") {
      switch (type2) {
        case /* EMPTY */4 :
        case /* CANNOT_INFER */5 :
            exit$1 = 3;
            break;
        case /* CONFLICT */6 :
            break;
        default:
          return /* CONFLICT */6;
      }
    } else if (type2.tag === /* APP */1) {
      var b2 = type2[1];
      var a2 = type2[0];
      var match = pass_check(a1, a2);
      var match$1 = pass_check(b1, b2);
      var exit$2 = 0;
      var exit$3 = 0;
      if (typeof match === "number" && !(match !== 4 && match < 6)) {
        return /* CONFLICT */6;
      } else {
        exit$3 = 5;
      }
      if (exit$3 === 5) {
        if (typeof match$1 === "number" && !(match$1 !== 4 && match$1 < 6)) {
          return /* CONFLICT */6;
        } else {
          exit$2 = 4;
        }
      }
      if (exit$2 === 4) {
        return /* APP */Block.__(1, [
                  pass_check(a1, a2),
                  pass_check(b1, b2)
                ]);
      }
      
    } else {
      return /* CONFLICT */6;
    }
  } else {
    var a = type1[0];
    if (typeof type2 === "number") {
      switch (type2) {
        case /* EMPTY */4 :
        case /* CANNOT_INFER */5 :
            exit$1 = 3;
            break;
        case /* CONFLICT */6 :
            break;
        default:
          return /* CONFLICT */6;
      }
    } else if (type2.tag) {
      return /* CONFLICT */6;
    } else {
      var b = type2[0];
      var match$2 = pass_check(a, b);
      if (typeof match$2 === "number" && !(match$2 !== 4 && match$2 < 6)) {
        return /* CONFLICT */6;
      } else {
        return /* List */Block.__(0, [pass_check(a, b)]);
      }
    }
  }
  if (exit$1 === 3) {
    if (typeof type2 === "number" && (type2 === 5 || type2 === 4)) {
      return type1;
    } else {
      exit = 2;
    }
  }
  if (exit === 2 && typeof type1 === "number") {
    switch (type1) {
      case /* HOLE */0 :
          break;
      case /* CANNOT_INFER */5 :
          return type2;
      case /* CONFLICT */6 :
          return /* CONFLICT */6;
      
    }
  }
  return /* CONFLICT */6;
}

function pass_concat(types) {
  if (types) {
    var t = types[1];
    var a = types[0];
    if (t) {
      return pass_check(a, pass_concat(t));
    } else {
      return a;
    }
  } else {
    return /* EMPTY */4;
  }
}

function find_variable_set($$var, _set) {
  while(true) {
    var set = _set;
    if (set) {
      var a = set[0];
      if ($$var === a[0]) {
        return a[1];
      } else {
        _set = set[1];
        continue ;
      }
    } else {
      return /* EMPTY */4;
    }
  };
}

function add_variable(v, env) {
  var match = v[0];
  if (match !== undefined) {
    if (env) {
      var t = env[1];
      var h = env[0];
      var s = match;
      if (h[0] === s) {
        return /* :: */[
                /* tuple */[
                  s,
                  v[1]
                ],
                add_variable(v, t)
              ];
      } else {
        return /* :: */[
                h,
                add_variable(v, t)
              ];
      }
    } else {
      return /* [] */0;
    }
  } else {
    return env;
  }
}

exports.option_string_concat = option_string_concat;
exports.option_string_concat_ignoreNone = option_string_concat_ignoreNone;
exports.indent_space = indent_space;
exports.pass_eq = pass_eq;
exports.pass_check = pass_check;
exports.pass_concat = pass_concat;
exports.find_variable_set = find_variable_set;
exports.add_variable = add_variable;
/* No side effect */

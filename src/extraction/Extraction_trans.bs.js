// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Extraction_tool$Extraction = require("./Extraction_tool.bs.js");
var Extraction_decons$Extraction = require("./Extraction_decons.bs.js");

function pass_trans(type1) {
  if (typeof type1 === "number") {
    switch (type1) {
      case /* Bool */1 :
          return "bool";
      case /* Number */2 :
          return "int";
      case /* Unit */3 :
          return "()";
      case /* EMPTY */4 :
          return ;
      default:
        return ;
    }
  } else if (type1.tag) {
    return Extraction_tool$Extraction.option_string_concat(/* :: */[
                pass_trans(type1[0]),
                /* :: */[
                  " -> ",
                  /* :: */[
                    pass_trans(type1[1]),
                    /* [] */0
                  ]
                ]
              ]);
  } else {
    return Extraction_tool$Extraction.option_string_concat(/* :: */[
                pass_trans(type1[0]),
                /* :: */[
                  " list",
                  /* [] */0
                ]
              ]);
  }
}

function add_var_annotation($$var, set) {
  if ($$var !== undefined) {
    return Extraction_tool$Extraction.option_string_concat_ignoreNone(/* :: */[
                $$var,
                /* :: */[
                  Extraction_tool$Extraction.option_string_concat(/* :: */[
                        ":",
                        /* :: */[
                          pass_trans(Extraction_tool$Extraction.find_variable_set($$var, set)),
                          /* [] */0
                        ]
                      ]),
                  /* [] */0
                ]
              ]);
  }
  
}

function trans_uhpat_pass(_t, set) {
  while(true) {
    var t = _t;
    var match = Extraction_decons$Extraction.uhpat_operand(t);
    switch (match.tag | 0) {
      case /* EmptyHole */0 :
          return /* HOLE */0;
      case /* Wild */1 :
          return /* CANNOT_INFER */5;
      case /* Var */2 :
          return Extraction_tool$Extraction.find_variable_set(match[2], set);
      case /* NumLit */3 :
          return /* Number */2;
      case /* BoolLit */4 :
          return /* Bool */1;
      case /* ListNil */5 :
          return /* List */Block.__(0, [/* CANNOT_INFER */5]);
      case /* Parenthesized */6 :
          _t = match[0];
          continue ;
      case /* Inj */7 :
          _t = match[2];
          continue ;
      
    }
  };
}

function trans_uhtyp_pass(_t) {
  while(true) {
    var t = _t;
    var match = Extraction_decons$Extraction.uhtyp_operand(t);
    if (typeof match === "number") {
      switch (match) {
        case /* Hole */0 :
            return /* HOLE */0;
        case /* Unit */1 :
            return /* CANNOT_INFER */5;
        case /* Num */2 :
            return /* Number */2;
        case /* Bool */3 :
            return /* Bool */1;
        
      }
    } else if (match.tag) {
      return /* List */Block.__(0, [trans_uhtyp_pass(match[0])]);
    } else {
      _t = match[0];
      continue ;
    }
  };
}

exports.pass_trans = pass_trans;
exports.add_var_annotation = add_var_annotation;
exports.trans_uhpat_pass = trans_uhpat_pass;
exports.trans_uhtyp_pass = trans_uhtyp_pass;
/* No side effect */

// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Extraction_UHPat$Extraction = require("./Extraction_UHPat.bs.js");
var Extraction_UHTyp$Extraction = require("./Extraction_UHTyp.bs.js");
var Extraction_declear$Extraction = require("./Extraction_declear.bs.js");

function uhexp_op_translater(op) {
  switch (op) {
    case /* Space */0 :
        return " ";
    case /* Plus */1 :
        return "+";
    case /* Minus */2 :
        return "-";
    case /* Times */3 :
        return "*";
    case /* LessThan */4 :
        return "<";
    case /* GreaterThan */5 :
        return ">";
    case /* Equals */6 :
        return "==";
    case /* Comma */7 :
        return ", ";
    case /* Cons */8 :
        return "::";
    case /* And */9 :
        return "&&";
    case /* Or */10 :
        return "||";
    
  }
}

function block_handler(block, level) {
  return Extraction_declear$Extraction.option_string_concat(/* :: */[
              lines_handler(block[0], level),
              /* :: */[
                exp_handler(block[1], level),
                /* [] */0
              ]
            ]);
}

function exp_handler(t, level) {
  switch (t.tag | 0) {
    case /* Var */1 :
        if (t[0] || t[1]) {
          return ;
        } else {
          return t[2];
        }
    case /* NumLit */2 :
        if (t[0]) {
          return ;
        } else {
          return String(t[1]);
        }
    case /* BoolLit */3 :
        if (t[0]) {
          return ;
        } else {
          return Pervasives.string_of_bool(t[1]);
        }
    case /* ListNil */4 :
        if (t[0]) {
          return ;
        } else {
          return "[]";
        }
    case /* Lam */5 :
        return lam_handler(t[0], t[1], t[2], t[3], level);
    case /* Inj */6 :
        return inj_handler(t[0], t[2], level);
    case /* Case */7 :
        if (t[0]) {
          return ;
        } else {
          return case_handler(t[1], t[2], t[3], level);
        }
    case /* Parenthesized */8 :
        return Extraction_declear$Extraction.option_string_concat(/* :: */[
                    "(",
                    /* :: */[
                      block_handler(t[0], level),
                      /* :: */[
                        ")",
                        /* [] */0
                      ]
                    ]
                  ]);
    case /* OpSeq */9 :
        var skel_t = t[0];
        if (skel_t.tag && !skel_t[0]) {
          return opseq_handler(t[1], level);
        } else {
          return ;
        }
    case /* EmptyHole */0 :
    case /* ApPalette */10 :
        return ;
    
  }
}

function lam_handler(errstatus, uhpat, uhtyp, block, level) {
  if (errstatus) {
    return ;
  } else if (uhtyp !== undefined) {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                "(fun ",
                /* :: */[
                  Extraction_UHPat$Extraction.uhpat_translater(uhpat),
                  /* :: */[
                    " : ",
                    /* :: */[
                      Extraction_UHTyp$Extraction.uhtyp_translater(uhtyp),
                      /* :: */[
                        " -> ",
                        /* :: */[
                          block_handler(block, level + 1 | 0),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  } else {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                "(fun ",
                /* :: */[
                  Extraction_UHPat$Extraction.uhpat_translater(uhpat),
                  /* :: */[
                    " -> ",
                    /* :: */[
                      block_handler(block, level + 1 | 0),
                      /* :: */[
                        ")",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  }
}

function inj_handler(errstatus, block, level) {
  if (errstatus) {
    return ;
  } else {
    return block_handler(block, level + 1 | 0);
  }
}

function opseq_handler(opseq, level) {
  if (opseq.tag) {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                opseq_handler(opseq[0], level + 1 | 0),
                /* :: */[
                  uhexp_op_translater(opseq[1]),
                  /* :: */[
                    exp_handler(opseq[2], level + 1 | 0),
                    /* [] */0
                  ]
                ]
              ]);
  } else {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                exp_handler(opseq[0], level + 1 | 0),
                /* :: */[
                  uhexp_op_translater(opseq[1]),
                  /* :: */[
                    exp_handler(opseq[2], level + 1 | 0),
                    /* [] */0
                  ]
                ]
              ]);
  }
}

function case_handler(block, rules, uhtyp, level) {
  if (uhtyp !== undefined) {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                "((match ",
                /* :: */[
                  block_handler(block, level),
                  /* :: */[
                    " with",
                    /* :: */[
                      rule_handler(rules, level + 1 | 0),
                      /* :: */[
                        ") : ",
                        /* :: */[
                          Extraction_UHTyp$Extraction.uhtyp_translater(uhtyp),
                          /* :: */[
                            ")",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  } else {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                "(match ",
                /* :: */[
                  block_handler(block, level),
                  /* :: */[
                    " with",
                    /* :: */[
                      rule_handler(rules, level + 1 | 0),
                      /* :: */[
                        ")",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  }
}

function rule_handler(rules, level) {
  if (rules) {
    var rule = rules[0];
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                "\n",
                /* :: */[
                  Extraction_declear$Extraction.indent_space(level),
                  /* :: */[
                    "| ",
                    /* :: */[
                      Extraction_UHPat$Extraction.uhpat_translater(rule[0]),
                      /* :: */[
                        " -> ",
                        /* :: */[
                          block_handler(rule[1], level + 1 | 0),
                          /* :: */[
                            rule_handler(rules[1], level),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  } else {
    return "";
  }
}

function lines_handler(lines, level) {
  if (lines) {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                line_handler(lines[0], level),
                /* :: */[
                  lines_handler(lines[1], level),
                  /* [] */0
                ]
              ]);
  } else {
    return "";
  }
}

function line_handler(line, level) {
  if (typeof line === "number") {
    return "\n";
  } else if (line.tag) {
    var block = line[2];
    var uhtyp = line[1];
    var uhpat = line[0];
    if (uhtyp !== undefined) {
      return Extraction_declear$Extraction.option_string_concat(/* :: */[
                  "let ",
                  /* :: */[
                    Extraction_UHPat$Extraction.uhpat_translater(uhpat),
                    /* :: */[
                      " : ",
                      /* :: */[
                        Extraction_UHTyp$Extraction.uhtyp_translater(uhtyp),
                        /* :: */[
                          " = ",
                          /* :: */[
                            block_handler(block, level + 1 | 0),
                            /* :: */[
                              " in\n",
                              /* :: */[
                                Extraction_declear$Extraction.indent_space(level),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]);
    } else {
      return Extraction_declear$Extraction.option_string_concat(/* :: */[
                  "let ",
                  /* :: */[
                    Extraction_UHPat$Extraction.uhpat_translater(uhpat),
                    /* :: */[
                      " = ",
                      /* :: */[
                        block_handler(block, level + 1 | 0),
                        /* :: */[
                          " in\n",
                          /* :: */[
                            Extraction_declear$Extraction.indent_space(level),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]);
    }
  } else {
    return Extraction_declear$Extraction.option_string_concat(/* :: */[
                exp_handler(line[0], level),
                /* :: */[
                  "\n",
                  /* :: */[
                    Extraction_declear$Extraction.indent_space(level),
                    /* [] */0
                  ]
                ]
              ]);
  }
}

function extraction_call(block) {
  var match = block_handler(block, 0);
  if (match !== undefined) {
    return match + ";;";
  } else {
    return "There could be some error in the code. Most possible is incomplete holes.";
  }
}

exports.uhexp_op_translater = uhexp_op_translater;
exports.block_handler = block_handler;
exports.exp_handler = exp_handler;
exports.lam_handler = lam_handler;
exports.inj_handler = inj_handler;
exports.opseq_handler = opseq_handler;
exports.case_handler = case_handler;
exports.rule_handler = rule_handler;
exports.lines_handler = lines_handler;
exports.line_handler = line_handler;
exports.extraction_call = extraction_call;
/* No side effect */
